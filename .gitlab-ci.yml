stages:
  - build
  - test
  - deploy

before_script:
  - export TAG=${CI_COMMIT_SHA:0:8}
  - export BRANCH=${CI_COMMIT_REF_NAME}
  - export REGISTRY_HOST=${CI_REGISTRY}
  - export REGISTRY_URI="/${CI_PROJECT_PATH}"
  - touch .env.development
  - touch .env.production

build:
  stage: build
  script:
    - docker info
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker-compose build --pull web worker
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker-compose push web
    - docker-compose push worker
  tags:
    - local

test:
  script:
    - echo 'TODO'
#    - docker-compose run web bash -c 'bundle && bundle exec rake db:create db:migrate db:test:prepare RAILS_ENV=test'
#    - docker-compose exec solr bash -c 'bin/solr create -c development -d /opt/config' || true
#    - docker-compose run web bundle exec rake
#    - docker-compose run web bundle exec rake assets:precompile
  # after_script:
  #   - docker-compose stop
  # services:
  #   - redis:3
  #   - postgres
  #   - solr:5.5
  #   - botimer/fcrepo:4.5.1
  tags:
    - docker


staging:
  image: registry.gitlab.com/notch8/scripts/builder:latest
  stage: deploy
  script:
    - export ANSIBLE_HOST_KEY_CHECKING=False
    # Set ssh key
    - echo $SSH_DEPLOY_KEY | base64 -d > $CI_PROJECT_DIR/ops/keys/deploy
    - chmod 600 $CI_PROJECT_DIR/ops/keys/deploy
    # Set ssh key
    - echo $SSH_KEY | base64 -d > $CI_PROJECT_DIR/ops/keys/hydra.pem
    - chmod 600 $CI_PROJECT_DIR/ops/keys/hydra.pem
    # set group vars
    - echo $GROUP_VARS_ALL | base64 -d > $CI_PROJECT_DIR/ops/group_vars/all
    # set ec2.ini
    - echo $EC2_INI | base64 -d > $CI_PROJECT_DIR/ops/ec2.ini
    - ./bin/deploy staging $CI_COMMIT_SHA
  only:
    - main
  tags:
    - docker


production:
  image: registry.gitlab.com/notch8/scripts/builder:latest
  stage: deploy
  script:
    - export ANSIBLE_HOST_KEY_CHECKING=False
    # Set ssh key
    - echo $SSH_DEPLOY_KEY | base64 -d > $CI_PROJECT_DIR/ops/keys/deploy
    - chmod 600 $CI_PROJECT_DIR/ops/keys/deploy
    # Set ssh key
    - echo $SSH_KEY | base64 -d > $CI_PROJECT_DIR/ops/keys/hydra.pem
    - chmod 600 $CI_PROJECT_DIR/ops/keys/hydra.pem
    # set group vars
    - echo $GROUP_VARS_ALL | base64 -d > $CI_PROJECT_DIR/ops/group_vars/all
    # set ec2.ini
    - echo $EC2_INI | base64 -d > $CI_PROJECT_DIR/ops/ec2.ini
    - ./bin/deploy production $CI_COMMIT_SHA
  when: manual
  only:
    - main
  tags:
    - docker

staging-new:
  stage: deploy
  only:
    refs:
      - main
      - upgrade_deployment
  variables:
    DEPLOY_IMAGE: $CI_REGISTRY_IMAGE
    DEPLOY_TAG: $CI_COMMIT_SHORT_SHA
    WORKER_IMAGE: $CI_REGISTRY_IMAGE/worker
    HELM_EXPERIMENTAL_OCI: 1
    HELM_RELEASE_NAME: hyrax-staging
    KUBE_NAMESPACE: staging
    HELM_EXTRA_ARGS: >
      --values ops/staging-deploy.yaml
  script:
    - export KUBECONFIG=$KUBECONFIG_ATLA
    - envsubst < ops/staging-deploy.tmpl.yaml > ops/staging-deploy.yaml
    - ./bin/helm_deploy staging staging
  tags:
    - local

production-new:
  stage: deploy
  only:
    refs:
      - main
      - upgrade_deployment
  variables:
    DEPLOY_IMAGE: $CI_REGISTRY_IMAGE
    DEPLOY_TAG: $CI_COMMIT_SHORT_SHA
    WORKER_IMAGE: $CI_REGISTRY_IMAGE/worker
    HELM_EXPERIMENTAL_OCI: 1
    HELM_RELEASE_NAME: hyrax-production
    KUBE_NAMESPACE: production
    HELM_EXTRA_ARGS: >
      --values ops/production-deploy.yaml
  script:
    - export KUBECONFIG=$KUBECONFIG_ATLA
    - envsubst < ops/production-deploy.tmpl.yaml > ops/production-deploy.yaml
    - ./bin/helm_deploy production production
  tags:
    - local
