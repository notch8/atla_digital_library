# encoding: utf-8

##
# Backup v4.x Configuration
#
# Documentation: https://github.com/backup/backup
# Issue Tracker: https://github.com/backup/backup/issues

##
# Config Options
#
# The options here may be overridden on the command line, but the result
# will depend on the use of --root-path on the command line.
#
# If --root-path is used on the command line, then all paths set here
# will be overridden. If a path (like --tmp-path) is not given along with
# --root-path, that path will use it's default location _relative to --root-path_.
#
# If --root-path is not used on the command line, a path option (like --tmp-path)
# given on the command line will override the tmp_path set here, but all other
# paths set here will be used.
#
# Note that relative paths given on the command line without --root-path
# are relative to the current directory. The root_path set here only applies
# to relative paths set here.
#
# ---
#
# Sets the root path for all relative paths, including default paths.
# May be an absolute path, or relative to the current working directory.
#
# root_path 'my/root'
#
# Sets the path where backups are processed until they're stored.
# This must have enough free space to hold apx. 2 backups.
# May be an absolute path, or relative to the current directory or +root_path+.
#
tmp_path  '/opt/Backup/tmp'
#
# Sets the path where backup stores persistent information.
# When Backup's Cycler is used, small YAML files are stored here.
# May be an absolute path, or relative to the current directory or +root_path+.
#
data_path '/opt/Backup/data'
Backup::Model.new(:{{ project_name }}, 'Backup the database and files') do
  ##
  # Split [Splitter]
  #
  # Split the backup file in to chunks of 250 megabytes
  # if the backup file size exceeds 250 megabytes
  #
  split_into_chunks_of 250

  {% for name in backup_db_names %}

  database PostgreSQL, :{{ name }} do |db|
    db.name               = "{{ name }}" 
    db.username           = "{{ backup_db_user }}"
    db.password           = "{{ backup_db_pass }}" 
    db.host               = "{{ backup_db_host }}"
    db.port               = "{{ backup_db_port }}"
  end
  {% endfor %}

  archive :shared do |archive|
    {% for files in backup_files %}
    archive.add "{{ files }}"
    {% endfor %}
    archive.tar_options '--warning=no-file-changed'
  end


  compress_with Gzip

  #$ openssl aes-256-cbc -d -base64 -in my_backup.tar.enc -out my_backup.tar
  encrypt_with OpenSSL do |encryption|
    encryption.password = "{{ backup_password }}"
    encryption.base64   = true
    encryption.salt     = true
  end

  Storage::S3.defaults do |s3|
    s3.region             = '{{ backup_region }}'
    s3.bucket             = '{{ backup_bucket }}'
    s3.path               = ''
    s3.encryption         = :aes256
    s3.storage_class      = :standard_ia
    s3.access_key_id      = "{{ backup_access_key }}"
    s3.secret_access_key  = "{{ backup_secret_key }}"
  end

  # Grandfather - Father - Sons implementation
  time = Time.now

  if time.day == 1  # first day of the month
    storage_id = :monthly
    keep = 12000  # only good until the year 3014
    store_with S3, storage_id do |s3|
      s3.keep               = keep
    end
  end

  if time.sunday?
    storage_id = :weekly
    keep = 8
    store_with S3, storage_id do |s3|
      s3.keep               = keep
    end
  end

  storage_id = :daily
  keep = 14

  store_with S3, storage_id do |s3|
    s3.keep               = keep
  end

  notify_by Mail do |mail|
    mail.on_success           = true
    mail.on_warning           = true
    mail.on_failure           = true

    mail.from                 = 'server@notch8.com'
    mail.to                   = 'rob@notch8.com' # Hipchat or dev team?
    mail.address              = 'email-smtp.us-east-1.amazonaws.com'
    mail.port                 = 587
    mail.domain               = 'notch8.com'
    mail.user_name            = '{{ backup_email_user }}'
    mail.password             = '{{ backup_email_password }}'
    mail.authentication       = 'plain'
    mail.encryption           = :starttls
  end
end
